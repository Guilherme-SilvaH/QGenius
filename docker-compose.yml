# docker-compose.yml
version: '3.8'

networks:
  qgenius-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:

services:
  # ========================================
  # BANCO DE DADOS - PostgreSQL
  # ========================================
  postgres:
    image: postgres:16-alpine
    container_name: qgenius-postgres
    networks:
      - qgenius-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-qgenius}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/src/main/resources/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-qgenius}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ========================================
  # CACHE - Redis
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: qgenius-redis
    networks:
      - qgenius-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ========================================
  # BACKEND - Spring Boot API Gateway
  # ========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: qgenius-backend
    networks:
      - qgenius-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-qgenius}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      
      # Redis
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      JWT_EXPIRATION: 86400000
      
      # IA Service
      IA_SERVICE_URL: http://ia-service:3001
      
      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # Spring Profile
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: on-failure

  # ========================================
  # OBSERVABILIDADE - Prometheus (Opcional)
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: qgenius-prometheus
    networks:
      - qgenius-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    restart: unless-stopped
    profiles:
      - monitoring

  # ========================================
  # OBSERVABILIDADE - Grafana (Opcional)
  # ========================================
  grafana:
    image: grafana/grafana:latest
    container_name: qgenius-grafana
    networks:
      - qgenius-network
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    ports:
      - "3001:3000"
    restart: unless-stopped
    profiles:
      - monitoring